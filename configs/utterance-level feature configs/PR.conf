
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////// > openSMILE configuration file for Utterance level prosodic (PR) features <	            //////////////////
/////////                                                            								//////////////////
///////// 																							//////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//
// Usage:
// SMILExtract -C thisconfig.conf -I input.wav -O output.arff 
//
 
[componentInstances:cComponentManager]
instance[dataMemory].type=cDataMemory
;; run single threaded (nThreads=1)
; NOTE: a single thread is more efficient for processing small files, since multi-threaded processing involves more 
;       overhead during startup, which will make the system slower in the end
nThreads=1
;; do not show any internal dataMemory level settings 
; (if you want to see them set the value to 1, 2, 3, or 4, depending on the amount of detail you wish)
printLevelStats=0


\{shared/standard_wave_input.conf.inc}


///////////----------------------- core ---------------------------------------------//////// 


[componentInstances:cComponentManager]
 ;;; 25 ms frames features:
instance[is10_fr25].type=cFramer
instance[is10_pe].type=cVectorPreemphasis
instance[is10_win].type=cWindower
instance[is10_fft].type=cTransformFFT
instance[is10_fftmagphase].type=cFFTmagphase




[is10_fr25:cFramer]
reader.dmLevel=wave
writer.dmLevel=is10_frames
\{\cm[bufferModeRbConf{shared/BufferModeRb.conf.inc}:path to included config to set the buffer mode for the standard ringbuffer levels]}
frameSize = 0.025
frameStep = 0.010
frameCenterSpecial = left

[is10_pe:cVectorPreemphasis]
reader.dmLevel=is10_frames
writer.dmLevel=is10_framespe
k=0.97

[is10_win:cWindower]
reader.dmLevel=is10_framespe
writer.dmLevel=is10_winframe
winFunc = ham
gain = 1.0

[is10_fft:cTransformFFT]
reader.dmLevel=is10_winframe
writer.dmLevel=is10_fftc

[is10_fftmagphase:cFFTmagphase]
reader.dmLevel=is10_fftc
writer.dmLevel=is10_fftmag
magnitude = 1
phase = 0




;;;;;;;;;;;;;;;;;;;;; Energy / loudness


[componentInstances:cComponentManager]
instance[energy].type=cEnergy
instance[melspec1].type=cMelspec
instance[audspec].type=cPlp
instance[audspecRasta].type=cPlp
instance[audspecSum].type=cVectorOperation
instance[audspecRastaSum].type=cVectorOperation


[energy:cEnergy]
reader.dmLevel = is10_frames
writer.dmLevel = energy
log=0
rms=1


[melspec1:cMelspec]
reader.dmLevel=is10_fftmag
writer.dmLevel=melspec1
; htk compatible sample value scaling
htkcompatible = 0
nBands = 26
; use power spectrum instead of magnitude spectrum
usePower = 1
lofreq = 20
hifreq = 8000
specScale = mel

; perform auditory weighting of spectrum
[audspec:cPlp]
reader.dmLevel=melspec1
writer.dmLevel=audspec
firstCC = 0
lpOrder = 5
cepLifter = 22
compression = 0.33
htkcompatible = 0 
doIDFT = 0
doLpToCeps = 0
doLP = 0
doInvLog = 0
doAud = 1
doLog = 0
newRASTA=0
RASTA=0

; perform RASTA style filtering of auditory spectra
[audspecRasta:cPlp]
reader.dmLevel=melspec1
writer.dmLevel=audspecRasta
nameAppend = Rfilt
firstCC = 0
lpOrder = 5
cepLifter = 22
compression = 0.33
htkcompatible = 0 
doIDFT = 0
doLpToCeps = 0
doLP = 0
doInvLog = 0
doAud = 1
doLog = 0
newRASTA=1
RASTA=0

[audspecSum:cVectorOperation]
reader.dmLevel = audspec
writer.dmLevel = audspecSum
// nameAppend = 
copyInputName = 1
processArrayFields = 0
operation = ll1
nameBase = audspec

[audspecRastaSum:cVectorOperation]
reader.dmLevel = audspecRasta
writer.dmLevel = audspecRastaSum
// nameAppend = 
copyInputName = 1
processArrayFields = 0
operation = ll1
nameBase = audspecRasta


;;;;;;;;;;;;;;;;;;;; smoothing

[componentInstances:cComponentManager]
instance[smoB].type=cContourSmoother

[smoB:cContourSmoother]
reader.dmLevel = audspecSum;audspecRastaSum;energy
writer.dmLevel = lldB_smo
writer.levelconf.isRb=0
writer.levelconf.growDyn=1
nameAppend = sma
copyInputName = 1
noPostEOIprocessing = 0
smaWin = 3

;;;;;;;;; deltas
[componentInstances:cComponentManager]
instance[deB].type=cDeltaRegression

[deB:cDeltaRegression]
reader.dmLevel = lldB_smo
writer.dmLevel = lldB_smo_de
writer.levelconf.isRb=0
writer.levelconf.growDyn=1





////////////////-------------------- pitch

[componentInstances:cComponentManager]
instance[int].type=cIntensity
instance[scale].type=cSpecScale
instance[shs].type=cPitchShs
instance[smooth].type=cPitchSmoother
instance[is10_pitchSmooth2].type=cPitchSmoother
instance[smo].type=cContourSmoother


[int:cIntensity]
reader.dmLevel = is10_frames
writer.dmLevel = intens
// nameAppend =
copyInputName = 1
processArrayFields = 1
intensity = 1
loudness = 0



[scale:cSpecScale]
reader.dmLevel=is10_fftmag
writer.dmLevel=hps
// nameAppend =
copyInputName = 1
processArrayFields = 0
scale=octave
sourceScale = lin
// logScaleBase = 2f
// logSourceScaleBase = 2
// firstNote = 55
interpMethod = spline
minF = 25
maxF = -1
nPointsTarget = 0
specSmooth = 1
specEnhance = 1
auditoryWeighting = 1 

[shs:cPitchShs]
reader.dmLevel=hps
writer.dmLevel=pitchShs
// nameAppend =
copyInputName = 1
processArrayFields = 0
maxPitch = 620
minPitch = 52
nCandidates = 4
scores = 1
voicing = 1
F0C1 = 0
voicingC1 = 0
F0raw = 1
voicingClip = 1
voicingCutoff = 0.700000
inputFieldSearch = Mag_logScale
octaveCorrection = 0
nHarmonics = 15
compressionFactor = 0.850000

[smooth:cPitchSmoother]
reader.dmLevel=pitchShs
writer.dmLevel=pitch
// nameAppend =
copyInputName = 1
processArrayFields = 0
medianFilter0 = 0
postSmoothing = 0
postSmoothingMethod = simple
 ; note: octave correction is too agressive, thus we disable it..
octaveCorrection = 0
F0final = 1
F0finalEnv = 1
no0f0 = 0
voicingFinalClipped = 0
voicingFinalUnclipped = 0
F0raw = 0
voicingC1 = 0
voicingClip = 0

[smo:cContourSmoother]
reader.dmLevel = pitch;intens
writer.dmLevel = lld_pitch_int
nameAppend = sma
copyInputName = 1
noPostEOIprocessing = 0
smaWin = 3


[is10_pitchSmooth2:cPitchSmoother]
reader.dmLevel=pitchShs
writer.dmLevel=is10_pitchF
F0raw = 0
F0final = 1
F0finalEnv = 0
voicingFinalUnclipped = 0
medianFilter0 = 0
postSmoothingMethod = simple
octaveCorrection = 0
writer.levelconf.nT=10
;writer.levelconf.noHang=2
writer.levelconf.isRb=0
writer.levelconf.growDyn=1





[componentInstances:cComponentManager]
 ;;; functionals over FULL input (e.g. turns)
instance[is10_functOnsets].type=cFunctionals

[is10_functOnsets:cFunctionals]
reader.dmLevel=is10_pitchF
writer.dmLevel=is10_functOnsets
\{\cm[bufferModeRbConf]}
 ; frameSize and frameStep = 0 => functionals over complete input
 ; (NOTE: buffersize of lld and lld_de levels must be large enough!!)
\{\cm[frameModeFunctionalsConf{shared/FrameModeFunctionals.conf.inc}:path to included config to set frame mode for all functionals]}
copyInputName=0
functNameAppend=Turn
functionalsEnabled=Onset;Times
//noPostEOIprocessing = 0
Onset.threshold = 0
;Onset.thresholdOnset = 0
;Onset.thresholdOffset = 0
Onset.useAbsVal = 0
Onset.onsetPos = 0
Onset.offsetPos = 0
Onset.numOnsets = 0
Onset.numOffsets = 0
Onset.onsetRate = 1
Onset.norm = segment
Times.upleveltime25 = 0
Times.downleveltime25 = 0
Times.upleveltime50 = 0
Times.downleveltime50 = 0
Times.upleveltime75 = 0
Times.downleveltime75 = 0
Times.upleveltime90 = 0
Times.downleveltime90 = 0
Times.risetime = 0
Times.falltime = 0
Times.leftctime = 0
Times.rightctime = 0
Times.duration = 0
Times.norm = second






[componentInstances:cComponentManager]
instance[stat_funct].type=cFunctionals

// statistical functionals
[stat_funct:cFunctionals]
reader.dmLevel=lldB_smo;lldB_smo_de;lld_pitch_int
writer.dmLevel=stat_funct
\{\cm[bufferModeRbConf]}
 ; frameSize and frameStep = 0 => functionals over complete input
 ; (NOTE: buffersize of lld and lld_de levels must be large enough!!)
\{\cm[frameModeFunctionalsConf]}
functionalsEnabled=Extremes;Regression;Moments;Percentiles;Times
Extremes.max = 1
Extremes.min = 1
Extremes.range = 1
Extremes.maxpos = 0
Extremes.minpos = 0
Extremes.amean = 1
Extremes.maxameandist=0
Extremes.minameandist=0
Extremes.norm = frame
Regression.linregc1 = 1
Regression.linregc2 = 1
Regression.linregerrA = 1
Regression.linregerrQ = 1
Regression.qregc1 = 0
Regression.qregc2 = 0
Regression.qregc3 = 0
Regression.qregerrA = 0
Regression.qregerrQ = 0
Regression.centroid = 0
Regression.oldBuggyQerr = 0
Regression.normInputs = 0
Regression.normRegCoeff = 0
Moments.variance = 1
Moments.stddev = 1
Moments.skewness = 1
Moments.kurtosis = 1
Moments.amean = 0
Percentiles.quartiles = 1
Percentiles.quartile1 = 0
Percentiles.quartile2 = 0
Percentiles.quartile3 = 0
Percentiles.iqr = 1
Percentiles.iqr12 = 0
Percentiles.iqr23 = 0
Percentiles.iqr13 = 0
Percentiles.interp = 1
Percentiles.percentile = 0.01;0.99
Percentiles.pctlrange=0-1
Times.upleveltime25 = 0
Times.downleveltime25 = 0
Times.upleveltime50 = 0
Times.downleveltime50 = 0
Times.upleveltime75 = 0
Times.downleveltime75 = 0
Times.upleveltime90 = 0
Times.downleveltime90 = 0
Times.risetime = 0
Times.falltime = 0
Times.leftctime = 0
Times.rightctime = 0
Times.duration = 0
Times.norm = segment
nonZeroFuncts = 0



;;;;;;;;; prepare features for standard output module

[componentInstances:cComponentManager]
instance[funcconcat].type=cVectorConcat

[funcconcat:cVectorConcat]
reader.dmLevel = is10_functOnsets;stat_funct
writer.dmLevel = func
includeSingleElementFields = 1






//////---------------------- END -------------------------///////




  //////////////////////////////////////////////////////////////////////
 ///////////////////  data output configuration  //////////////////////
//////////////////////////////////////////////////////////////////////


 ;;; write instances to a Weka ARFF file (comment out to disable)
[componentInstances:cComponentManager]
instance[arffsink].type=cArffSink


// ----- you can use this to save the features extracted  ------
[arffsink:cArffSink]
reader.dmLevel=func
 ; do not print "frameNumber" attribute to ARFF file
number=0
 ; name of output file as commandline option
filename=\cm[output(O){?}:name of WEKA Arff output file, set to a valid filename to enable this output sink]
;filename=\cm[arffout(O){output.arff}:name of WEKA Arff output file]
 ; name of @relation in the ARFF file
relation=\cm[corpus{SMILEfeaturesLive}:corpus name, arff relation]
 ; base name of the current instance, turn number will be appended
instanceName=\cm[instname(N){noname}:name of arff instance]
 ; instanceBase=liveturn
 ; name of class label
class[0].name = emotion
 ; list of nominal classes OR "numeric"
class[0].type = \cm[classes{unknown}:all classes for arff file attribute]
 ; the class label or value for the current instance
target[0].all = \cm[classlabel{unassigned}:instance class label]
 ; ** NOTE: theoretically the classified class label could be assigned here, however this would require 
 ; ** saving the class label along with the frame in the dataMemory
 ; ** or sending this meta-data via a message (including frame number)
 ; ** neither solution is currently implemented.... :-(
 ;
append=1

//////---------------------- END -------------------------///////

