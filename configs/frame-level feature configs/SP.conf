
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////// > openSMILE configuration file for Frame level SP features <	            				//////////////////
/////////                                                            								//////////////////
///////// 																							//////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



//
// Usage:
// SMILExtract -C thisconfig.conf -I input.wav -O output.arff 
//

 
[componentInstances:cComponentManager]
instance[dataMemory].type=cDataMemory
;; run single threaded (nThreads=1)
; NOTE: a single thread is more efficient for processing small files, since multi-threaded processing involves more 
;       overhead during startup, which will make the system slower in the end
nThreads=1
;; do not show any internal dataMemory level settings 
; (if you want to see them set the value to 1, 2, 3, or 4, depending on the amount of detail you wish)
printLevelStats=0


\{shared/standard_wave_input.conf.inc}


///////////----------------------- core ---------------------------------------------//////// 


[componentInstances:cComponentManager]
instance[is10_res].type=cSpecResample
 ;;; 25 ms frames features:
instance[is10_fr25].type=cFramer
instance[is10_pe].type=cVectorPreemphasis
instance[is10_win].type=cWindower
instance[is10_fft].type=cTransformFFT
instance[is10_fftmagphase].type=cFFTmagphase
 ; mfcc
instance[is10_mspec].type=cMelspec
 ; log mel frequency bands (mfb)
instance[is10_mspec2].type=cMelspec
instance[is10_vo].type=cVectorOperation
instance[is10_lpc].type=cLpc
 ; Line Spectral Frequencies
instance[is10_lsp].type=cLsp
 ;;; all LLD concattenated and smoothed using a moving average filter
instance[is10_lld].type=cContourSmoother
 ; delta coefficients of LLD
instance[is10_delta1].type=cDeltaRegression


[is10_fr25:cFramer]
reader.dmLevel=wave
writer.dmLevel=is10_frames
\{\cm[bufferModeRbConf{shared/BufferModeRb.conf.inc}:path to included config to set the buffer mode for the standard ringbuffer levels]}
frameSize = 0.025
frameStep = 0.010
frameCenterSpecial = left

[is10_pe:cVectorPreemphasis]
reader.dmLevel=is10_frames
writer.dmLevel=is10_framespe
k=0.97

[is10_win:cWindower]
reader.dmLevel=is10_framespe
writer.dmLevel=is10_winframe
winFunc = ham
gain = 1.0

[is10_fft:cTransformFFT]
reader.dmLevel=is10_winframe
writer.dmLevel=is10_fftc

[is10_fftmagphase:cFFTmagphase]
reader.dmLevel=is10_fftc
writer.dmLevel=is10_fftmag
magnitude = 1
phase = 0

[is10_mspec:cMelspec]
reader.dmLevel=is10_fftmag
writer.dmLevel=is10_mspec1
htkcompatible = 0
usePower = 1
lofreq = 20
hifreq = 8000
nBands=26
specScale = mel
bwMethod = lr

[is10_mspec2:cMelspec]
reader.dmLevel=is10_fftmag
writer.dmLevel=is10_mspec2
htkcompatible = 0
usePower = 1
lofreq = 20
hifreq = 6500
nBands=8
specScale = mel
bwMethod = lr

[is10_vo:cVectorOperation]
reader.dmLevel=is10_mspec2
writer.dmLevel=is10_mspec2log
operation = log
copyInputName = 0
nameAppend=logMelFreqBand

[is10_res:cSpecResample]
reader.dmLevel=is10_fftc
writer.dmLevel=is10_outpR
targetFs = 11000

[is10_lpc:cLpc]
;reader.dmLevel=framespe
reader.dmLevel=is10_outpR
writer.dmLevel=is10_lpc
p=8
method = acf
saveLPCoeff = 1
lpGain = 0
saveRefCoeff = 0
residual = 0
forwardFilter = 0
lpSpectrum = 0

[is10_lsp:cLsp]
reader.dmLevel=is10_lpc
writer.dmLevel=is10_lsp


[is10_lld:cContourSmoother]
reader.dmLevel=is10_mspec2log;is10_lsp
writer.dmLevel=is10_lld1
\{\cm[bufferModeConf{shared/BufferMode.conf.inc}:path to included config to set the buffer mode for the levels before the functionals]}
smaWin = 3
; this level must grow to hold ALL the LLD of the full input

// ---- delta regression of LLD ----
[is10_delta1:cDeltaRegression]
reader.dmLevel=is10_lld1
writer.dmLevel=is10_lld1_de
\{\cm[bufferModeConf]}
deltawin=2
blocksize=1


//////---------------------- END -------------------------///////




  //////////////////////////////////////////////////////////////////////
 ///////////////////  data output configuration  //////////////////////
//////////////////////////////////////////////////////////////////////

[componentInstances:cComponentManager]
instance[audspec_lldconcat].type=cVectorConcat

[audspec_lldconcat:cVectorConcat]
reader.dmLevel = is10_lld1;is10_lld1_de
writer.dmLevel = lld
includeSingleElementFields = 1



 ;;; write instances to a Weka ARFF file (comment out to disable)
[componentInstances:cComponentManager]
instance[arffsink].type=cArffSink


// ----- you can use this to save the features extracted  ------
[arffsink:cArffSink]
reader.dmLevel=lld
number=0
filename=\cm[output(O){?}:name of WEKA Arff output file, set to a valid filename to enable this output sink]
relation=\cm[corpus{SMILEfeaturesLive}:corpus name, arff relation]
instanceName=\cm[instname(N){noname}:name of arff instance]
class[0].name = emotion
class[0].type = \cm[classes{unknown}:all classes for arff file attribute]
target[0].all = \cm[classlabel{unassigned}:instance class label]
append=1

//////---------------------- END -------------------------///////

