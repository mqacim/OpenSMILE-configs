
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////// > openSMILE configuration file for Frame level LPC features <	            				//////////////////
/////////                                                            								//////////////////
///////// 																							//////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



//
// Usage:
// SMILExtract -C thisconfig.conf -I input.wav -O output.arff 
//


[componentInstances:cComponentManager]
instance[dataMemory].type=cDataMemory

\{shared/standard_wave_input.conf.inc}

[componentInstances:cComponentManager]
 ; audio framer
instance[frame].type=cFramer
 ; speech pre-emphasis (on a per frame basis as HTK does it)
instance[pe].type=cVectorPreemphasis
 ; apply a window function to pre-emphasised frames
instance[win].type=cWindower
 ; transform to the frequency domain using FFT
instance[fft].type=cTransformFFT
 ; compute magnitude of the complex fft from the previous component
instance[fftmag].type=cFFTmagphase
 ; compute critical-bands from magnitude spectrum
instance[melspec].type=cMelspec
 ; compute PLP from critical-band spectrum
instance[lpc].type=cLpc
 ; compute delta coefficients from mfcc and energy
instance[delta].type=cDeltaRegression
 ; compute acceleration coefficients from delta coefficients of mfcc and energy
instance[accel].type=cDeltaRegression

; run single threaded (nThreads=1)
; NOTE: a single thread is more efficient for processing small files, since multi-threaded processing involves more 
;       overhead during startup, which will make the system slower in the end
nThreads=1
; do not show any internal dataMemory level settings 
; (if you want to see them set the value to 1, 2, 3, or 4, depending on the amount of detail you wish)
printLevelStats=0


/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////   component configuration  ////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
; the following sections configure the components listed above
; a help on configuration parameters can be obtained with 
;  SMILExtract -H
; or
;  SMILExtract -H configTypeName (= componentTypeName)
/////////////////////////////////////////////////////////////////////////////////////////////

[frame:cFramer]
reader.dmLevel=wave
writer.dmLevel=frames
frameSize = 0.0250
frameStep = 0.010
frameMode = fixed
frameCenterSpecial = left

[pe:cVectorPreemphasis]
reader.dmLevel=frames
writer.dmLevel=framespe
k=0.97
de=0

[win:cWindower]
reader.dmLevel=framespe
writer.dmLevel=winframes
 ; hamming window
winFunc = ham
 ; no gain
gain = 1.0
offset = 0

[fft:cTransformFFT]
reader.dmLevel=winframes
writer.dmLevel=fft
 ; for compatibility with 2.2.0 and older versions
zeroPadSymmetric = 0

[fftmag:cFFTmagphase]
reader.dmLevel=fft
writer.dmLevel=fftmag

[melspec:cMelspec]
reader.dmLevel=fftmag
writer.dmLevel=melspec
; htk compatible sample value scaling
htkcompatible = 1
nBands = 26
; use power spectrum instead of magnitude spectrum
usePower = 1
lofreq = 0
hifreq = 8000
specScale = mel

[lpc:cLpc]
reader.dmLevel=framespe
;reader.dmLevel=is10_outpR
writer.dmLevel=lpc
p=8
method = acf
saveLPCoeff = 1
lpGain = 0
saveRefCoeff = 0
residual = 0
forwardFilter = 0
lpSpectrum = 0

;[plp:cPlp]
;reader.dmLevel=melspec
;writer.dmLevel=plp
;firstCC = 0
;;lastCC  = 12
;lpOrder = 10
;cepLifter = 22
;compression = 0.33
;htkcompatible = 1 
;doIDFT = 1
;doLpToCeps = 1
;doLP = 1
;doInvLog = 0
;doAud = 1
;doLog = 0

[delta:cDeltaRegression]
reader.dmLevel=lpc
writer.dmLevel=lpcde
deltawin=2
blocksize=1

[accel:cDeltaRegression]
reader.dmLevel=lpcde
writer.dmLevel=lpcdede
deltawin=2
blocksize=1

  //////////////////////////////////////////////////////////////////////
 ///////////////////  data output configuration  //////////////////////
//////////////////////////////////////////////////////////////////////

[componentInstances:cComponentManager]
instance[audspec_lldconcat].type=cVectorConcat

[audspec_lldconcat:cVectorConcat]
reader.dmLevel = lpc;lpcde;lpcdede
writer.dmLevel = lld
includeSingleElementFields = 1



 ;;; write instances to a Weka ARFF file (comment out to disable)
[componentInstances:cComponentManager]
instance[arffsink].type=cArffSink


// ----- you can use this to save the features extracted  ------
[arffsink:cArffSink]
reader.dmLevel=lld
number=0
filename=\cm[output(O){?}:name of WEKA Arff output file, set to a valid filename to enable this output sink]
relation=\cm[corpus{SMILEfeaturesLive}:corpus name, arff relation]
instanceName=\cm[instname(N){noname}:name of arff instance]
class[0].name = emotion
class[0].type = \cm[classes{unknown}:all classes for arff file attribute]
target[0].all = \cm[classlabel{unassigned}:instance class label]
append=1

//////---------------------- END -------------------------///////

